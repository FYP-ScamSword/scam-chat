name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 14

    - name: Install dependencies
      run: npm install --dev

  tests:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: npm install

    - name: Create env file
      working-directory: .
      run: |
        echo '${{ secrets.ENV_FILE }}' > .env

    - name: Run static analysis
      run: npx eslint .

    - name: Run integration test
      working-directory: .
      run: npm run test

  deploy-scam-chat:
      needs: tests
      if: github.ref == 'refs/heads/main'
      name: Deploy app
      runs-on: ubuntu-latest
      steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: scam-chat
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Force new deployment
        run: |
          aws ecs update-service --cluster site-inspection-cluster --service scam-chat-service --region ap-southeast-1 --force-new-deployment
